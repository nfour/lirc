(function() {var $$, $html, bind, cfg, error, server, terminal;$html = $$ = void 0;cfg = {scrollbar: {scrollInertia: 0},server: {port: 8765,host: 'localhost'},cmdChars: /[\.\+\-]/i};$(document).ready(function() {var conn, key, val, _i, _len;$$ = {terminal: $('.terminal'),terminal_caret: $('.terminal .caret'),terminal_input: $('.terminal .input input'),tabs: $('.terminal-tabs'),tab_buttons: $('.terminal-tabs .tab'),tab_contents: $('.content .tab-content'),bot_tabs: $('.bot-tabs'),bot_tab_buttons: $('.bot-tabs .tab'),bot_tab_contents: $('.bot-content'),content: $('.content')};$html = {terminal: $('.terminal-outer'),tab: $('.terminal-tabs > .tab'),bot_tab: $('.bot-tabs > .tab'),bot_content: $('.bot-content')};for (val = _i = 0, _len = $html.length; _i < _len; val = ++_i) {key = $html[val];$html[key] = $('<div>').append(val.clone()).html();}server.conn = conn = io.connect("http://" + cfg.server.host + ":" + cfg.server.port);return bind(server.listeners, conn);});server = {conn: void 0,listeners: {msg: function(bot, msg) {terminal.add(bot, 'all', server.prettyMsg(msg));if (msg.cmd === 'BOTMSG') {return terminal.add(bot, 'botnet', server.prettyMsg(msg));} else {return terminal.add(bot, 'irc', server.prettyMsg(msg));}},data: function(bot, data) {console.log('Recieved data:', data);return terminal.add(bot, 'raw_irc', data);},input: function(bot, data) {console.log('Recieved data:', data);return terminal.addInput(bot, data);},send: function(bot, data) {return terminal.addInput(bot, 'SEND ' + data);},botmsg: function(bot, data) {console.log('Recieved data:', data);return terminal.add(bot, 'botnet', data);},botinfo: function(bot, names) {return terminal.buildTerminal(names);}},prettyMsg: function(msg) {var ary, key, result, val;ary = [];ary.push("[ " + msg.cmd + " ]");for (key in msg) {val = msg[key];if (key.match(/^(raw|words|cmd|remains|origin)$/)) {continue;}if (key === 'target22') {if (!val || val === lirc.session.server.user.nick) {continue;}}ary.push("" + key + "=\"" + val + "\"");}result = ary.join(', ');result = result.replace(/\ /g, '&nbsp;');return result;}};terminal = {input: {submit: function(text) {if (!text) {return false;}$('.terminal .input input').attr('value', '');if (text = terminal.input.parse(text)) {return terminal.input.send(text);}},parse: function(text) {var words;if (!text) {return error('Invalid syntax.');}if (!text[0].match(cfg.cmdChars)) {return error('Invalid syntax. Unrecognized command character');}words = text.split(' ');words[0] = words[0].toLowerCase();text = words.join(' ');return text;},send: function(text) {if (!server.conn) {return false;}server.conn.emit('input', text);return console.log('Emitted: input,', text);},listeners: {keypress: function(event) {if (event.which === 13) {terminal.input.submit(this.value);return false;}},focus: function() {return $(this).siblings('.caret').toggleClass('active');},focusout: function() {return $(this).siblings('.caret').removeClass('active');}}},add: function(bot, tabName, text) {var now, nowFormatted, tab, timestamp;if (text == null) {text = '';}if (!(tabName in terminal.botMap[bot].tabs)) {return false;}tab = terminal.botMap[bot].tabs[tabName];now = new Date();nowFormatted = now.getMonth() + '.' + now.getDate() + ' ' + now.getHours() + ':' + now.getMinutes();timestamp = "<span class='timestamp' data='" + (now.getTime()) + "'>" + nowFormatted + "</span>";tab.content.append("<li value='" + tab.lines + "'>" + (timestamp + text) + "</li>\n");++tab.lines;if (tab.content.hasClass('active')) {terminal.scrollbar.update(bot);return terminal.scrollbar.scroll(bot, 'bottom');}},addInput: function(bot, text) {var identifier, tabName;if (text == null) {text = '';}identifier = "<span class=\"caret\">&gt;&gt;</span>";for (tabName in terminal.botMap[bot].tabs) {terminal.add(bot, tabName, identifier + text);}return true;},botMap: {},buildTabs: function(bot, container) {var buttons, tabs;buttons = $(".terminal-tabs .tab", container);tabs = {};buttons.each(function() {var button, content, name;button = $(this);name = button.attr('name');content = $(".content .tab-content[name=\"" + name + "\"]", container);tabs[name] = {button: button,content: content,lines: 0};return button.click(function() {return (function() {return terminal.switchTab(bot, button);})();});});return tabs;},buildTerminal: function(names) {var button, container, content, existing, map, name, _i, _len;for (_i = 0, _len = names.length; _i < _len; _i++) {name = names[_i];map = {};if (existing = $('.bot-tabs .tab:not([name])')[0] || $(".bot-tabs .tab[name=" + name + "]")[0]) {map.button = $(existing).attr('name', name).html(name);} else {container = $('.bot-tabs');button = $('<div class="tab">').attr('name', name).html(name);map.button = $(button.appendTo(container));}map.button.click(function() {return terminal.switchBotTab($(this));});if (existing = $('.bot-content:not([name])')[0] || $(".bot-content[name=" + name + "]")[0]) {map.content = $(existing).attr('name', name);} else {container = $('.terminal-outer');content = $('<div class="bot-content">').attr('name', name).html($html.bot_content.html());map.content = $(content.appendTo(container));}map.tabs = terminal.buildTabs(name, map.content);terminal.botMap[name] = map;}terminal.scrollbar.build($('.content'));bind(terminal.input.listeners, $('.terminal .input input'));return terminal.botMap;},switchBotTab: function(selector) {var bot, tab;if (selector.hasClass('active')) {return false;}bot = selector.attr('name');tab = terminal.botMap[bot];$('.bot-tabs .tab').each(function() {return $(this).removeClass('active');});$('.bot-content').each(function() {return $(this).removeClass('active');});tab.button.addClass('active');tab.content.addClass('active');terminal.scrollbar.update(bot);return terminal.scrollbar.scroll(bot, 'bottom');},switchTab: function(bot, selector) {var container, name, tab;name = selector.attr('name');console.log('name', name);if (selector.hasClass('active') || !name) {return false;}tab = terminal.botMap[bot].tabs[name];container = terminal.botMap[bot].content;$('.terminal-tabs .tab', container).each(function() {return $(this).removeClass('active');});$('.tab-content', container).each(function() {return $(this).removeClass('active');});tab.button.addClass('active');tab.content.addClass('active');terminal.scrollbar.update(bot);return terminal.scrollbar.scroll(bot, 'bottom');},scrollbar: {scroll: function(bot, pos) {if (pos == null) {pos = 'bottom';}if (bot) {return $(".bot-content[name=" + bot + "] .mCustomScrollbar").mCustomScrollbar('scrollTo', pos);} else {return $(".mCustomScrollbar").each(function() {return $(this).mCustomScrollbar('scrollTo', pos);});}},update: function(bot) {if (bot) {return $(".bot-content[name=" + bot + "] .mCustomScrollbar").mCustomScrollbar('update');} else {return $(".mCustomScrollbar").each(function() {return $(this).mCustomScrollbar('update');});}},build: function($obj) {return $obj.mCustomScrollbar(cfg.scrollbar);}}};bind = function(listeners, bindee, funcName) {var fn, key;if (funcName == null) {funcName = 'on';}for (key in listeners) {fn = listeners[key];bindee[funcName](key, fn);}return bindee;};error = function(str) {if (str == null) {str = '';}console.log('Error:', str);return false;};/*# Tab switchingfor key, tab of tabstab.selector.click(->self	= $(this)tabName	= self.attr('name')return false if self.hasClass('active') or ! tabName of tabsselections.tabs.buttons.removeClass('active')selections.tabs.content.removeClass('active')self.addClass('active')tabs[tabName].content.selector.addClass('active')scrollbar.update(selections.content))format = {msg : (text) ->text = text + '\r\n'msg = {text		: textorigin		: ''destination	: 'server'command		: ''words		: []}words = text.split(' ')if ! words[0].match(/^:/)words.unshift(':webClient')if words[0].match(/^:/)msg.origin		= words[0].replace(/^:/, '')words			= words[1..]msg.command		= words[0] || ''words			= words[1..]msg.words = wordsreturn msg}message = {add : (tabName, text) ->return false if ! tabName of tabstab = tabs[tabName]tab.content.lines = content.lines or 0++tab.content.linesline = tab.content.linestab.content.selector.append("<li value='#{line}'>#{text}</li>\n")scrollbar.update(selections.content)scrollbar.bottom(selections.content)return truesend : (text) ->return false if ! text or typeof text isnt 'string'console.log('Sending: ', text)server.emit('input', text)}commands = [[/msg/i(msg) ->origin		= msg.origindestination	= msg.words[0]words		= msg.words[1..].join(' ')command		= 'WEB:BOTMSG'if destination.match(/^[#&]/)command = 'WEB:PRIVMSG'ary = [':' + origincommanddestination':' + words]return ary.join(' ')]]handle = {eventStruct : (msg, eventStruct) ->for args in eventStructmatch		= args[0]callback	= args[1]if ( match instanceof RegExp and msg.command.match(match) ) or msg.command is matchreturn callback(msg)return falsemsg : (data) ->msg		= format.msg(data)text	= handle.eventStruct(msg, commands)message.send(text)}*/}).call(this);