

var stream = require('stream').Stream
var util = require('util')

function Suckle() {

    stream.call(this)

    this.writable     = true
    this.fns          = []
    this.chunks       = []
    this.chunksLength = 0

    var pipes = this.pipes = Array.prototype.slice.call(arguments)

    if (typeof pipes[pipes.length-1] === 'function') {
        this.fns.push(pipes.pop())
    }

}

util.inherits(Suckle, stream)

Suckle.prototype.end = function() {

    var pipes = this.pipes

    try {
        for (var i=0, len=pipes.length; i<len; i++) {
            pipes[i].end()
        }
    }catch(ex) { }

    if (this.fns.length) {
        var fns = this.fns
        var accumulated = Buffer.concat(this.chunks, this.chunksLength)
        for (var i=0, len=fns.length; i<len; i++) {
            fns[i](accumulated)
        }
    }

    return this

}

Suckle.prototype.write = function(data, encoding) {

    var pipes = this.pipes

    for (var i=0, len=pipes.length; i<len; i++) {
        pipes[i].write(data, encoding)
    }

    if (this.fns.length) {
        var buf = new Buffer(data, encoding)
        this.chunks.push(buf)
        this.chunksLength += buf.length
    }

    return this
}

Suckle.prototype.oncomplete = function(cb) {
    this.fns.push(cb)
    return this
}

Suckle.prototype.pipe = function(where) {
    this.pipes.push(where)
    return this
}

module.exports = Suckle
