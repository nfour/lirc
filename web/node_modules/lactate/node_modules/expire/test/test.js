
var expire = require('../lib/expire')

var vows   = require('vows')
var assert = require('assert')

var options = {
    reporter:require('vows/lib/vows/reporters/spec')
}

var validateUnits = {
    'One minute': {
        topic:expire.units.minute,
        'is 60 seconds':function(minute) {
            assert.strictEqual(minute, 60)
        }
    },
    'One hour': {
        topic:expire.units.hour,
        'is 3600 seconds':function(hour) {
            assert.strictEqual(hour, 3600)
        }
    },
    'One day': {
        topic:expire.units.day,
        'is 86400 seconds':function(day) {
            assert.strictEqual(day, 86400)
        }
    },
    'One week': {
        topic:expire.units.week,
        'is 604800 seconds':function(week) {
            assert.strictEqual(week, 604800)
        }
    },
    'One month': {
        topic:expire.units.month,
        'is 2592000 seconds':function(month) {
            assert.strictEqual(month, 2592000)
        }
    },
    'One year': {
        topic:expire.units.year,
        'is 31536000 seconds':function(year) {
            assert.strictEqual(year, 31536000)
        }
    }
}


var validateValues = {
    'Zero': {
        topic:expire.values[0],
        'is array':function(ar) {
            assert.ok(ar instanceof Array)
        },
        'has length 2':function(ar) {
            assert.strictEqual(ar.length, 2)
        },
        'contains "zero" string':function(val) {
            assert.notStrictEqual(val.indexOf('zero'), -1)
        },
        'contains "0" string':function(val) {
            assert.notStrictEqual(val.indexOf('0'), -1)
        }
    },
    'One': {
        topic:expire.values[1],
        'is array':function(ar) {
            assert.ok(ar instanceof Array)
        },
        'has length 2':function(ar) {
            assert.strictEqual(ar.length, 2)
        },
        'contains "one" string':function(val) {
            assert.notStrictEqual(val.indexOf('one'), -1)
        },
        'contains "1" string':function(val) {
            assert.notStrictEqual(val.indexOf('1'), -1)
        }
    },
    'Two': {
        topic:expire.values[2],
        'is array':function(ar) {
            assert.ok(ar instanceof Array)
        },
        'has length 2':function(ar) {
            assert.strictEqual(ar.length, 2)
        },
        'contains "two" string':function(val) {
            assert.notStrictEqual(val.indexOf('two'), -1)
        },
        'contains "2" string':function(val) {
            assert.notStrictEqual(val.indexOf('2'), -1)
        }
    },
    'Three': {
        topic:expire.values[3],
        'is array':function(ar) {
            assert.ok(ar instanceof Array)
        },
        'has length 2':function(ar) {
            assert.strictEqual(ar.length, 2)
        },
        'contains "three" string':function(val) {
            assert.notStrictEqual(val.indexOf('three'), -1)
        },
        'contains "3" string':function(val) {
            assert.notStrictEqual(val.indexOf('3'), -1)
        }
    },
    'Four': {
        topic:expire.values[4],
        'is array':function(ar) {
            assert.ok(ar instanceof Array)
        },
        'has length 2':function(ar) {
            assert.strictEqual(ar.length, 2)
        },
        'contains "four" string':function(val) {
            assert.notStrictEqual(val.indexOf('four'), -1)
        },
        'contains "4" string':function(val) {
            assert.notStrictEqual(val.indexOf('4'), -1)
        }
    },
    'Five': {
        topic:expire.values[5],
        'is array':function(ar) {
            assert.ok(ar instanceof Array)
        },
        'has length 2':function(ar) {
            assert.strictEqual(ar.length, 2)
        },
        'contains "five" string':function(val) {
            assert.notStrictEqual(val.indexOf('five'), -1)
        },
        'contains "5" string':function(val) {
            assert.notStrictEqual(val.indexOf('5'), -1)
        }
    },
    'Six': {
        topic:expire.values[6],
        'is array':function(ar) {
            assert.ok(ar instanceof Array)
        },
        'has length 2':function(ar) {
            assert.strictEqual(ar.length, 2)
        },
        'contains "six" string':function(val) {
            assert.notStrictEqual(val.indexOf('six'), -1)
        },
        'contains "6" string':function(val) {
            assert.notStrictEqual(val.indexOf('6'), -1)
        }
    },
    'Seven': {
        topic:expire.values[7],
        'is array':function(ar) {
            assert.ok(ar instanceof Array)
        },
        'has length 2':function(ar) {
            assert.strictEqual(ar.length, 2)
        },
        'contains "seven" string':function(val) {
            assert.notStrictEqual(val.indexOf('seven'), -1)
        },
        'contains "7" string':function(val) {
            assert.notStrictEqual(val.indexOf('7'), -1)
        }
    },
    'Eight': {
        topic:expire.values[8],
        'is array':function(ar) {
            assert.ok(ar instanceof Array)
        },
        'has length 2':function(ar) {
            assert.strictEqual(ar.length, 2)
        },
        'contains "eight" string':function(val) {
            assert.notStrictEqual(val.indexOf('eight'), -1)
        },
        'contains "8" string':function(val) {
            assert.notStrictEqual(val.indexOf('8'), -1)
        }
    },
    'Nine': {
        topic:expire.values[9],
        'is array':function(ar) {
            assert.ok(ar instanceof Array)
        },
        'has length 2':function(ar) {
            assert.strictEqual(ar.length, 2)
        },
        'contains "nine" string':function(val) {
            assert.notStrictEqual(val.indexOf('nine'), -1)
        },
        'contains "9" string':function(val) {
            assert.notStrictEqual(val.indexOf('9'), -1)
        }
    },
    'Ten': {
        topic:expire.values[10],
        'is array':function(ar) {
            assert.ok(ar instanceof Array)
        },
        'has length 2':function(ar) {
            assert.strictEqual(ar.length, 2)
        },
        'contains "ten" string':function(val) {
            assert.notStrictEqual(val.indexOf('ten'), -1)
        },
        'contains "10" string':function(val) {
            assert.notStrictEqual(val.indexOf('10'), -1)
        }
    },
    'Eleven': {
        topic:expire.values[11],
        'is array':function(ar) {
            assert.ok(ar instanceof Array)
        },
        'has length 2':function(ar) {
            assert.strictEqual(ar.length, 2)
        },
        'contains "eleven" string':function(val) {
            assert.notStrictEqual(val.indexOf('eleven'), -1)
        },
        'contains "11" string':function(val) {
            assert.notStrictEqual(val.indexOf('11'), -1)
        }
    },
    'Twelve': {
        topic:expire.values[12],
        'is array':function(ar) {
            assert.ok(ar instanceof Array)
        },
        'has length 2':function(ar) {
            assert.strictEqual(ar.length, 2)
        },
        'contains "twelve" string':function(val) {
            assert.notStrictEqual(val.indexOf('twelve'), -1)
        },
        'contains "12" string':function(val) {
            assert.notStrictEqual(val.indexOf('12'), -1)
        }
    },
    'Thirteen': {
        topic:expire.values[13],
        'is array':function(ar) {
            assert.ok(ar instanceof Array)
        },
        'has length 2':function(ar) {
            assert.strictEqual(ar.length, 2)
        },
        'contains "thirteen" string':function(val) {
            assert.notStrictEqual(val.indexOf('thirteen'), -1)
        },
        'contains "13" string':function(val) {
            assert.notStrictEqual(val.indexOf('13'), -1)
        }
    },
    'Fourteen': {
        topic:expire.values[14],
        'is array':function(ar) {
            assert.ok(ar instanceof Array)
        },
        'has length 2':function(ar) {
            assert.strictEqual(ar.length, 2)
        },
        'contains "fourteen" string':function(val) {
            assert.notStrictEqual(val.indexOf('fourteen'), -1)
        },
        'contains "14" string':function(val) {
            assert.notStrictEqual(val.indexOf('14'), -1)
        }
    },
    'Fifteen': {
        topic:expire.values[15],
        'is array':function(ar) {
            assert.ok(ar instanceof Array)
        },
        'has length 2':function(ar) {
            assert.strictEqual(ar.length, 2)
        },
        'contains "fifteen" string':function(val) {
            assert.notStrictEqual(val.indexOf('fifteen'), -1)
        },
        'contains "15" string':function(val) {
            assert.notStrictEqual(val.indexOf('15'), -1)
        }
    },
    'Sixteen': {
        topic:expire.values[16],
        'is array':function(ar) {
            assert.ok(ar instanceof Array)
        },
        'has length 2':function(ar) {
            assert.strictEqual(ar.length, 2)
        },
        'contains "sixteen" string':function(val) {
            assert.notStrictEqual(val.indexOf('sixteen'), -1)
        },
        'contains "16" string':function(val) {
            assert.notStrictEqual(val.indexOf('16'), -1)
        }
    },
    'Seventeen': {
        topic:expire.values[17],
        'is array':function(ar) {
            assert.ok(ar instanceof Array)
        },
        'has length 2':function(ar) {
            assert.strictEqual(ar.length, 2)
        },
        'contains "seventeen" string':function(val) {
            assert.notStrictEqual(val.indexOf('seventeen'), -1)
        },
        'contains "17" string':function(val) {
            assert.notStrictEqual(val.indexOf('17'), -1)
        }
    },
    'Eighteen': {
        topic:expire.values[18],
        'is array':function(ar) {
            assert.ok(ar instanceof Array)
        },
        'has length 2':function(ar) {
            assert.strictEqual(ar.length, 2)
        },
        'contains "eighteen" string':function(val) {
            assert.notStrictEqual(val.indexOf('eighteen'), -1)
        },
        'contains "18" string':function(val) {
            assert.notStrictEqual(val.indexOf('18'), -1)
        }
    },
    'Nineteen': {
        topic:expire.values[19],
        'is array':function(ar) {
            assert.ok(ar instanceof Array)
        },
        'has length 2':function(ar) {
            assert.strictEqual(ar.length, 2)
        },
        'contains "nineteen" string':function(val) {
            assert.notStrictEqual(val.indexOf('nineteen'), -1)
        },
        'contains "19" string':function(val) {
            assert.notStrictEqual(val.indexOf('19'), -1)
        }
    },
    'Twenty': {
        topic:expire.values[20],
        'is array':function(ar) {
            assert.ok(ar instanceof Array)
        },
        'has length 2':function(ar) {
            assert.strictEqual(ar.length, 2)
        },
        'contains "twenty" string':function(val) {
            assert.notStrictEqual(val.indexOf('twenty'), -1)
        },
        'contains "20" string':function(val) {
            assert.notStrictEqual(val.indexOf('20'), -1)
        }
    }
}

var expandedNumerals = {
    'one second': {
        topic:expire.getSeconds('one second'),
        'is 1':function(val) {
            assert.strictEqual(val, 1)
        }
    },
    'one minute': {
        topic:expire.getSeconds('one minute'),
        'is 60':function(val) {
            assert.strictEqual(val, 60)
        }
    },
    'one hour': {
        topic:expire.getSeconds('one hour'),
        'is 3600':function(val) {
            assert.strictEqual(val, 3600)
        }
    },
    'one day': {
        topic:expire.getSeconds('one day'),
        'is 86400':function(val) {
            assert.strictEqual(val, 86400)
        }
    },
    'one week': {
        topic:expire.getSeconds('one week'),
        'is 604800':function(val) {
            assert.strictEqual(val, 604800)
        }
    },
    'one month': {
        topic:expire.getSeconds('one month'),
        'is 2592000':function(val) {
            assert.strictEqual(val, 2592000)
        }
    },
    'one year': {
        topic:expire.getSeconds('one year'),
        'is 31536000':function(val) {
            assert.strictEqual(val, 31536000)
        }
    },
    'one asdf': {
        topic:expire.getSeconds('one asdf'),
        'is 0':function(val) {
            assert.strictEqual(val, 0)
        }
    }
}

var expandedNumerals2 = {
    'one second and one second': {
        topic:expire.getSeconds('one second and one second'),
        'is 2':function(val) {
            assert.strictEqual(val, 2)
        }
    },
    'one minute and one second': {
        topic:expire.getSeconds('one minute and one second'),
        'is 61':function(val) {
            assert.strictEqual(val, 61)
        }
    },
    'one hour and one second': {
        topic:expire.getSeconds('one hour and one second'),
        'is 3601':function(val) {
            assert.strictEqual(val, 3601)
        }
    },
    'one day and one second': {
        topic:expire.getSeconds('one day and one second'),
        'is 86401':function(val) {
            assert.strictEqual(val, 86401)
        }
    },
    'one week and one second': {
        topic:expire.getSeconds('one week and one second'),
        'is 604801':function(val) {
            assert.strictEqual(val, 604801)
        }
    },
    'one month and one second': {
        topic:expire.getSeconds('one month and one second'),
        'is 2592001':function(val) {
            assert.strictEqual(val, 2592001)
        }
    },
    'one year and one second': {
        topic:expire.getSeconds('one year and one second'),
        'is 31536001':function(val) {
            assert.strictEqual(val, 31536001)
        }
    }
}

var numbers = {
    '1 second': {
        topic:expire.getSeconds('1 second'),
        'is 1':function(val) {
            assert.strictEqual(val, 1)
        }
    },
    '1 minute': {
        topic:expire.getSeconds('1 minute'),
        'is 60':function(val) {
            assert.strictEqual(val, 60)
        }
    },
    '1 hour': {
        topic:expire.getSeconds('1 hour'),
        'is 3600':function(val) {
            assert.strictEqual(val, 3600)
        }
    },
    '1 day': {
        topic:expire.getSeconds('1 day'),
        'is 86400':function(val) {
            assert.strictEqual(val, 86400)
        }
    },
    '1 week': {
        topic:expire.getSeconds('1 week'),
        'is 604800':function(val) {
            assert.strictEqual(val, 604800)
        }
    },
    '1 month': {
        topic:expire.getSeconds('1 month'),
        'is 2592000':function(val) {
            assert.strictEqual(val, 2592000)
        }
    },
    '1 year': {
        topic:expire.getSeconds('1 year'),
        'is 31536000':function(val) {
            assert.strictEqual(val, 31536000)
        }
    }
}

var numbers2 = {
    '1 second and 1 second': {
        topic:expire.getSeconds('1 second and 1 second'),
        'is 2':function(val) {
            assert.strictEqual(val, 2)
        }
    },
    '1 minute and 1 second': {
        topic:expire.getSeconds('1 minute and 1 second'),
        'is 61':function(val) {
            assert.strictEqual(val, 61)
        }
    },
    '1 hour and 1 second': {
        topic:expire.getSeconds('1 hour and 1 second'),
        'is 3601':function(val) {
            assert.strictEqual(val, 3601)
        }
    },
    '1 day and 1 second': {
        topic:expire.getSeconds('1 day and 1 second'),
        'is 86401':function(val) {
            assert.strictEqual(val, 86401)
        }
    },
    '1 week and 1 second': {
        topic:expire.getSeconds('1 week and 1 second'),
        'is 604801':function(val) {
            assert.strictEqual(val, 604801)
        }
    },
    '1 month and 1 second': {
        topic:expire.getSeconds('1 month and 1 second'),
        'is 2592001':function(val) {
            assert.strictEqual(val, 2592001)
        }
    },
    '1 year and 1 second': {
        topic:expire.getSeconds('1 year and 1 second'),
        'is 31536001':function(val) {
            assert.strictEqual(val, 31536001)
        }
    }
}

var invalidGetSeconds = {
    'asdf': {
        topic:expire.getSeconds('asdf seconds'),
        'is 0':function(val) {
           assert.strictEqual(val, 0)
        }
    },
    'asdf seconds': {
        topic:expire.getSeconds('asdf seconds'),
        'is 0':function(val) {
           assert.strictEqual(val, 0)
        }
    },
    '1 asdf': {
        topic:expire.getSeconds('1 asdf'),
        'is 0':function(val) {
           assert.strictEqual(val, 0)
        }
    },
    'asdf asdf': {
        topic:expire.getSeconds('asdf asdf'),
        'is 0':function(val) {
           assert.strictEqual(val, 0)
        }
    },
    'asdf seconds and 1 second': {
        topic:expire.getSeconds('asdf seconds and 1 second'),
        'is 1':function(val) {
           assert.strictEqual(val, 1)
        }
    },
    'asdf seconds and asdf seconds': {
        topic:expire.getSeconds('asdf seconds and asdf seconds'),
        'is 0':function(val) {
           assert.strictEqual(val, 0)
        }
    }
    
}

var setExpiration = {
    'setExpiration decorator': {
        topic:function() {
            var o = {}
            expire.setExpiration(o, 'one second')
            this.callback(null, o)
        },
        'has valid expires property':function(val) {
            assert.ok(val['Expires'])
            assert.ok(Date.parse(val['Expires']))
        },
        'has valid Cache-Control property':function(val) {
            assert.ok(val['Cache-Control'])
            assert.ok(/^max-age=[0-9]+$/.test(val['Cache-Control']))
        }
    },
    'setExpiration return value': {
        topic:expire.setExpiration({}, 'one second'),
        'has valid expires property':function(val) {
            assert.ok(val['Expires'])
            assert.ok(Date.parse(val['Expires']))
        },
        'has valid Cache-Control property':function(val) {
            assert.ok(val['Cache-Control'])
            assert.ok(/^max-age=[0-9]+$/.test(val['Cache-Control']))
        }
    },
    'setExpiration return value without object argument': {
        topic:expire.setExpiration('one second'),
        'has valid expires property':function(val) {
            assert.ok(val['Expires'])
            assert.ok(Date.parse(val['Expires']))
        },
        'has valid Cache-Control property':function(val) {
            assert.ok(val['Cache-Control'])
            assert.ok(/^max-age=[0-9]+$/.test(val['Cache-Control']))
        }

    }
}

vows
.describe('Validate Units')
.addBatch(validateUnits)
.export(module)

vows
.describe('Validate Values')
.addBatch(validateValues)
.export(module)

vows
.describe('Expanded Numerals (one, two, ...)')
.addBatch(expandedNumerals)
.export(module)

vows
.describe('Expanded Numerals Level Two (one and , two and , ...)')
.addBatch(expandedNumerals2)
.export(module)

vows
.describe('Numbers (1, 2, ...)')
.addBatch(numbers)
.export(module)

vows
.describe('Numbers Level Two (1 and , 2 and , ...)')
.addBatch(numbers2)
.export(module)

vows.describe('Invalid')
.addBatch(invalidGetSeconds)
.export(module)

vows.describe('Set Expiration')
.addBatch(setExpiration)
.export(module)
