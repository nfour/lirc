{
  "name": "lactate",
  "version": "0.8.4",
  "description": "Simple assets server",
  "keywords": [
    "static",
    "assets",
    "cache"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/Weltschmerz/Lactate.git"
  },
  "author": {
    "name": "Weltschmerz",
    "email": "chlavois@gmail.com"
  },
  "dependencies": {
    "mime": "1.2.7",
    "suckle": "0.3.2",
    "expire": "0.4.3"
  },
  "devDependencies": {
    "mocha": "1.3.0",
    "should": "1.0.0"
  },
  "main": "lib/lactate.js",
  "scripts": {
    "test": "make test"
  },
  "engines": {
    "node": ">= 0.5.0"
  },
  "readme": "# Lactate\n\n`npm install lactate`\n\nAn exceedingly fast static file handler, with a few electives.\n\n* Automaic gzipping\n* In-memory caching\n* Robust Expires settings\n* Directory namespacing\n* Middleware\n\n## Benchmark\n\n[Preliminary benchmarks](https://github.com/Weltschmerz/Lactate/blob/master/benchmark/new/results.md) show that Lactate has a significant advantage over  most worthy competitors on the [node modules wiki](https://github.com/joyent/node/wiki/Modules#wiki-web-frameworks-static)\n\n*node version v0.8.0*\n\n![Bench](http://i.imgur.com/MbXJH.jpg)\n\n* `jquery.min.js` ~100kb\n* `santamonica.jpg` ~1mb\n\n*See /benchmark for details*\n\n## Example\n\nJust pass three arguments to the serve function `path` [optional], `request`, `response`. Lactate will stream your file to the client in the most efficient way, by piping node's readStream to gzip, and finally to the response.\n\n```js\n\nvar express = require('express')\nvar app = express.createServer()\n\nvar Lactate = require('lactate')\nvar lactate = Lactate.Lactate()\n\nlactate.set({\n  root:process.cwd(),\n  expires:'one day and 12 minutes'\n})\n\napp.get('/', function(req, res) {\n  lactate.serve('pages/land.html', req, res)\n})\n\nvar files = Lactate.dir('files', {\n  public:'files',\n  expires:'ten years'\n}).toMiddleware()\n\napp.get('/files/*', files)\n\napp.listen(8080)\n\n```\n\n##The varieties of Lactate experience\n\nIn the general case, the `Lactate` method returns an object with the methods `serve` `set` and `get`, importantly. However, there are more convenient methods exported by Lactate. They follow.\n\n###Serving an individual file\n\nTo serve an individual file, use the `file` method.\n\n```js\n  var Lactate = require('lactate')\n\n  app.get('*', function(req, res) {\n    Lactate.file('images/somn.jpg', req, res)\n  })\n```\n\nAn optional fourth argument is for Lactate settings.\n\n```js\n  var Lactate = require('lactate')\n  var options = {\n    cache:true,\n    expires:'two days'\n  }\n\n  app.get('*', function(req, res) {\n    Lactate.file('images/somn.jpg', req, res, options)\n  })\n```\n\n###Namespacing a directory\n\nThe `dir` method allows you to namespace a directory, for convenience.\n\n```js\nvar Lactate = require('lactate')\nvar images = Lactate.dir('images', {expires:'one day'})\n\napp.get('/images/:image', function(req, res) {\n  images.serve(req.params.image, req, res)\n})\n```\n\n###Middleware\n\nFor maximum convenience, you may use the `toMiddleware` method on directories.\n\n```js\nvar Lactate = require('lactate')\n\nvar images = Lactate.dir('images', {\n  expires:'one day'\n}).toMiddleware()\n\napp.use(images) //That's it!\n```\n\nYou may also pass additional options to the `toMiddleware` function.\n\n```js\nvar images = Lactate.dir('images', {\n  expires:'one day'\n})\n\nvar middleware = images.toMiddleware({\n  public:'images'\n})\n\napp.use(middleware)\n```\n\n##Options\n\nOptions can be passed to the initialization function or using the `set` method.\n\n### Setting options\n\n```js\n\n//Passing to initialization function\nvar lactate = require('lactate').Lactate({\n  expires:'two days'\n})\n\n//Set method\nlactate.set('expires', null)\n\n//Either function accepts (key, value) or an object.\n\n```\n\n### Options available\n\n+ `root` **string**\n\nLocal directory from which to serve files. By default, the current working directory.\n\n+ `public` **string**\n\nPublic directory exposed to clients. If set, only requests from /*directory* will complete.\n\n+ `subdirs` **boolean**\n\nBy default subdirectories are served. To disable this, set `subdirs` to false.\n\n+ `cache` **boolean**\n\nKeep files in-memory. Enabled by default, and no great reason to disable.\n\n+ `expires` **number** or **string**\n\nPass this function a number (of seconds) or a string and appropriate headers will be set for client-side caching. Lactate comes with expiration defaults, such as 'two days' or '5 years and sixteen days' See [Expire](https://github.com/Weltschmerz/Expire) for details.\n\n```code\nlactate.set('expires', 87500)\n//87500 seconds\nlactate.set('expires', 'two days')\n//172800 seconds\nlactate.set'expires', 'five weeks and one minute and ten seconds')\n//3024070 seconds\nlactate.set('expires', 'one year and 2 months and seven weeks and 16 seconds')\n//41050028 seconds\n\n```\n\n+ `debug` **boolean** (*optional*) **number** (*optional*) **function** (*optional*) \n\nDebugging in Lactate is level-based (*bases: `0`, `1`*). Level `0` logs completed request information, status codes, etc.. Level `1` provides more details along the service. You may override the default debug function (*console.log*) with your own.\n\n```js\n\nvar lactate = require('lactate')({\n  debug:true // Will use console.log to debug all events\n})\n\nlactate.set('debug', 0, function(level, msg, path, statusCode) {\n  /* \n    Captures all level 0 events\n\n    Note however that statusCode arguments are only\n    given for level 0 listeners\n  */\n})\n\nlactate.set('debug', 1, console.log)\nlactate.set({debug:false})\n\n```\n\n## License\n\nMIT\n\n*Lactate is used internally by [Transmit](https://github.com/Weltschmerz/Transmit)*\n",
  "_id": "lactate@0.8.4",
  "dist": {
    "shasum": "ccfbf1e813d528d8400da1cc227d309784d46f5e"
  },
  "_from": "lactate"
}
