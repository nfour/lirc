
net		= require 'net'
path	= require 'path'
lance	= require 'lance'

{merge, clone} = Object
{type, empty} = Function

defaultCfg = require '../cfg/lirc'

module.exports	=
lirc			= (newCfg = {}, doConnect = false) ->
	lirc.cfg = merge clone( defaultCfg ), newCfg

	lirc.session.build lirc.cfg

	if doConnect
		return lirc.connect()

	return lirc

lirc.cfg = null

lirc.connect = (newCfg) ->
	if not lirc.cfg
		if type( newCfg ) is 'object'
			lirc newCfg
		else
			return lirc.error 'Error', 'Lirc.connect', 'Lirc not initialized'

	lirc.session.conn = conn = net.createConnection lirc.cfg.server

	conn.setTimeout		lirc.cfg.timeout
	conn.setEncoding	lirc.cfg.encoding
	conn.setKeepAlive	true, lirc.cfg.keepAlive

	lirc.parse.bindListeners lirc.mappings.irc, conn

	return conn

lirc.send = (text = '') ->
	text = lirc.format.substitute.vars text

	console.log 'Sending to IRC: ', text

	if lirc.session.conn
		lirc.session.conn.write "#{ text }\r\n"
		return true

	return false

lirc.join = (chans, chanKey) ->
	chans = chans or lirc.cfg.chans # TODO: cfg format not stable

	return false if empty chans

	if type( chans ) is 'string'
		if chanKey
			chans = [[chans, chanKey]] # TODO: may want to change format to objects
		else
			chans = [chans]

	lists = {
		chans	: []
		keys	: []
	}

	for chan in chans
		if type( chan ) is 'array'
			lists.chans.push chan[0]
			lists.keys.push chan[1] if chan[1]
		else
			lists.chans.push chan

	text = lists.chans.join ','
	text += ' ' + lists.keys.join ',' if lists.keys

	#@session.server.chans[] remember to add this shit when confirmation of chan join event pops

	lirc.send "JOIN #{ text }"

lirc.part = (chans) ->
	chans = chans or lirc.session.server.chans # TODO: session format not stable

	return false if not2 chans

	if type( chans ) is 'string'
		chans = [chans]
	
	list = []
	for chan in chans
		if type( chan ) is 'array'
			list.push chan[0]
		else
			list.push chan

	text = list.join ','

	lirc.send "PART #{ text }"

lirc.mode = (text) -> # TODO: need to parse add arguments
	return false if not text

	lirc.send "MODE #{ text }"

# Extend lirc

lirc.mappings = {}

require './mappings/irc'
require './mappings/botnet'
require './mappings/formatting'
require './mappings/actions'

# Each module below extends lirc on it own

require './emitter'
require './session'
require './botnet'
require './format'
require './parse'

require '../web' # TODO: WEB!

module.exports = lirc







